// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// BySealingLagRateLimiterConfigSetter is an autogenerated mock type for the BySealingLagRateLimiterConfigSetter type
type BySealingLagRateLimiterConfigSetter struct {
	mock.Mock
}

// HalvingInterval provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigSetter) HalvingInterval() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HalvingInterval")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MaxSealingLag provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigSetter) MaxSealingLag() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxSealingLag")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MinCollectionSize provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigSetter) MinCollectionSize() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinCollectionSize")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MinSealingLag provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigSetter) MinSealingLag() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinSealingLag")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// SetHalvingInterval provides a mock function with given fields: value
func (_m *BySealingLagRateLimiterConfigSetter) SetHalvingInterval(value uint) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetHalvingInterval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxSealingLag provides a mock function with given fields: value
func (_m *BySealingLagRateLimiterConfigSetter) SetMaxSealingLag(value uint) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetMaxSealingLag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMinCollectionSize provides a mock function with given fields: value
func (_m *BySealingLagRateLimiterConfigSetter) SetMinCollectionSize(value uint) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetMinCollectionSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMinSealingLag provides a mock function with given fields: value
func (_m *BySealingLagRateLimiterConfigSetter) SetMinSealingLag(value uint) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for SetMinSealingLag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBySealingLagRateLimiterConfigSetter creates a new instance of BySealingLagRateLimiterConfigSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBySealingLagRateLimiterConfigSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BySealingLagRateLimiterConfigSetter {
	mock := &BySealingLagRateLimiterConfigSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
