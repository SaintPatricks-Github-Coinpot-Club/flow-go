// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// BySealingLagRateLimiterConfigGetter is an autogenerated mock type for the BySealingLagRateLimiterConfigGetter type
type BySealingLagRateLimiterConfigGetter struct {
	mock.Mock
}

// HalvingInterval provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigGetter) HalvingInterval() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HalvingInterval")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MaxSealingLag provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigGetter) MaxSealingLag() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxSealingLag")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MinCollectionSize provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigGetter) MinCollectionSize() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinCollectionSize")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MinSealingLag provides a mock function with no fields
func (_m *BySealingLagRateLimiterConfigGetter) MinSealingLag() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinSealingLag")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// NewBySealingLagRateLimiterConfigGetter creates a new instance of BySealingLagRateLimiterConfigGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBySealingLagRateLimiterConfigGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BySealingLagRateLimiterConfigGetter {
	mock := &BySealingLagRateLimiterConfigGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
